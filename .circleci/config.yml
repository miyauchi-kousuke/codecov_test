version: 2.1
orbs:
  codecov: codecov/codecov@1.0.4
  slack: circleci/slack@3.3.0
jobs:
  build:
    docker:
      - image: circleci/golang:latest
      - image: circleci/mysql:5.7-ram
    environment:
      GO111MODULE: "on"
      FAKE_DB_HOST: "127.0.0.1:3306"
      FAKE_DB_PASSWORD: "null"
    working_directory: /go/src/github.com/miyauchi-sup/codecov_test
    steps:
      - checkout
      - run: sudo apt install -y default-mysql-client
      - run: GO111MODULE=off go get golang.org/x/lint/golint
      - run: go vet -v $(go list ./... |grep -v 'vendor')
      - run: golint $(go list ./... |grep -v 'vendor')
      - run: go test -cover $(go list ./... |grep -v 'vendor') -coverprofile=coverage.out
      - run: go tool cover -html=coverage.out -o coverage.html
      - store_artifacts:
          path: ./coverage.html
          destination: coverage.html
      - codecov/upload:
          file: ./coverage.out
      - slack/status:
          success_message: ':circleci-pass: $CIRCLE_BRANCH のデプロイが完了しました\n:github_octocat: User：$CIRCLE_USERNAME'
          failure_message: ':circleci-fail: $CIRCLE_BRANCH のデプロイが失敗しました\n:github_octocat: User：$CIRCLE_USERNAME'
          webhook: '${SLACK_ENDPOINT}'
      - run:
          name: slack to coverage url
          command: |
            curl -X POST --data-urlencode 'payload={"username": "circleCI", "text": "カバレッジ結果はこちら:<'https://${CIRCLE_BUILD_NUM}-224077321-gh.circle-artifacts.com/0/coverage.html' | coverage.html :bow:>", "icon_emoji": ":ghost:"}' ${SLACK_ENDPOINT}